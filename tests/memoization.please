(print "Memoization")

; A function that takes a long time to calculate
(defun fibonacci (n)
  (match n
    [0 0]
    [1 1]
    [n (+ (fibonacci (- n 1)) (fibonacci (- n 2)))]))

(define fibonacci/memo (memoize-loop loop (n)
  (match n
    [0 0]
    [1 1]
    [n (+ (loop (- n 1)) (loop (- n 2)))])))

(define n 10)
(let (
  [(fibs . profile) (profiling/get-stats (fibonacci n))]
  [(fibs/memo . profile/memo) (profiling/get-stats (fibonacci/memo n))]
  [time (second (profiling/data/summarize profile))]
  [time/memo (second (profiling/data/summarize profile/memo))])
  (assert-eq fibs fibs/memo)
  (print "Memoized function is " 
    (number->rounded-string (- (/ time time/memo 0.01) 100) 0)
    "% faster")
  (assert (<= time/memo time)))
