; Generate functions using macros.
; the `z_` name is because files are evaled in alphabetical order...
; this is garbage garbage code but it works. fite me.

(define (car-family len)
  (let (
    [ads (mult (map (const '(true false)) (range len)))])
    (map 
      (\ (ad) 
        (let 
          ([name 
            (string "c"
              (apply string (map (lambda (c) (if c "a" "d")) ad))
              "r")]
          [code (fold 
            (lambda (a n) (list (if n 'car 'cdr) a))
            'x ad)])
          `(define (,(string->symbol name) x) ,code)))
      ads)))
(define-macro (make-car-family max) 
  (if (>= max 2)
    `(do (unquote-splicing (car-family max)) (make-car-family ,(sub1 max)))
    ()))
(make-car-family 5)

(define (cmpnum-family n)
  (map 
    (\ (op) 
      (let ([name (string->symbol (string op n))])
        `(define (,name x) (,op x ,n))))
    (list '< '<= '= '>= '>)))
(define-macro (make-cmpnum-family n) 
  (if (>= n 0)
    `(do
      ,@(cmpnum-family n)
      (make-cmpnum-family ,(-- n)))
    ()))
(make-cmpnum-family 9)
