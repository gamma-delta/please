; Generate functions using macros.
; the `z_` name is because files are evaled in alphabetical order...
; this is garbage garbage code but it works. fite me.

(defun car-family (len)
  (let (
    [ads (mult (map (const '(true false)) (range len)))])
    (map 
      (\ (ad) 
        (let 
          ([name 
            (string "c"
              (apply string (map (lambda (c) (if c "a" "d")) ad))
              "r")]
          [code (fold 
            (lambda (a n) (list (if n 'car 'cdr) a))
            'x ad)])
          `(defun ,(string->symbol name) (x) ,code)))
      ads)))
(define-macro make-car-family (max) 
  (if (>= max 2)
    `(do ,@(car-family max) (make-car-family ,(sub1 max)))
    ()))
(make-car-family 5)

(defun cmpnum-family (n)
  (map 
    (\ (op) 
      (let ([name (string->symbol (string op n))])
        `(defun ,name (x) (,op x ,n))))
    (list '< '<= '= '>= '> '!=)))
(define-macro make-cmpnum-family (n) 
  (if (>= n 0)
    `(do
      ,@(cmpnum-family n)
      (make-cmpnum-family ,(-- n)))
    ()))
(make-cmpnum-family 9)

(defun read-family (types)
  (for (\ (type) (let (
    [out-name (if (list? type) (first type) type)]
    [pred-name (if (list? type) (second type) type)]
    [fn-name (string->symbol (string "read/" out-name))]
    [predicate? (string->symbol (string pred-name "?"))])
    `(defun ,fn-name (str)
      (let1 [datum (read str)] (cond
        [(!= 1 (list/len datum)) (! 
          ',(string->symbol (string "read/" out-name "/count"))
          (string "expected to read 1 datum but instead got " (list/len datum))
          datum)]
        [(not (,predicate? (car datum))) (!
          ',(string->symbol (string "read/" out-name "/invalid"))
          (\ (d) (string "the read type was " (typeof d) ", not " ,out-name))
          (car datum))]
        (car datum))))))
    types))
(define-macro make-read-family (types)
  `(do ,@(read-family types)))
(make-read-family (
  "number"
  ("integer" "exact")
  ("float" "inexact")
  "string"
  "symbol"
  "bool"
  "pair"
  "list"
  "nil"
  "map"))
; if you want to read callables you're gonna have to do that yourself my friend
