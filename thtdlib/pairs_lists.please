(defun list args args)

(defun list-rev (l)
  (if (> (list-len l) 1)
    (extend (list-rev (cdr l)) (car l))
    l))
(define list/rev list-rev)

(defun list-len (l)
  (fold (lambda (acc _) (add1 acc)) 0 l))
(define list/len list-len)

(defun append1 (l x) 
  (if l
    (lazy-cons (car l) (append1 (cdr l) x))
    x))

(defun append lists
  (if lists
    (append1 (car lists) (apply append (cdr lists)))
    '()))

(defun extend (l . rest) (append l rest)) ; auto-list

(defun list-nth (l n)
  (if (<=0 n)
    (car l)
    (list-nth (cdr l) (sub1 n))))
(define list/nth list-nth)

(defun first (l)   (car l))
(defun second (l)  (list-nth l 1))
(defun third (l)   (list-nth l 2))
(defun fourth (l)  (list-nth l 3))
(defun fifth (l)   (list-nth l 4))
(defun sixth (l)   (list-nth l 5))
(defun seventh (l) (list-nth l 6))
(defun eighth (l)  (list-nth l 7))
(defun ninth (l)   (list-nth l 8))
(defun tenth (l)   (list-nth l 9))

(defun list-empty? (l) (=0 (list-len l))) ; this is just `null?` w/e
(define list-!empty? (negate list-empty?)) 

; Return the first `n` elements of `l`
(defun take (l n) 
  (if (<=0 n)
    ()
    (lazy-cons (car l) (take (cdr l) (sub1 n)))))

; Skip the first `n` elements of `l`
(defun leave (l n)
  (if (<=0 n)
    l
    (leave (cdr l) (sub1 n))))
(define drop leave) ; alwinfy's no fun

; Omit the nth element of l
(defun omit (l n) 
  (let ([split (split-at l n)])
    (append (car split) (cddr split))))

(defun reverse (l)
  (and l (append (reverse (cdr l)) (list (car l)))))

(defun split-at (l n) (cons (take l n) (leave l n)))

(defun find (needle haystack [default equal? equal?]) 
  (let searcher ([n 0] [haystack haystack])
    (cond
      [(not haystack) false]
      [(equal? needle (car haystack)) n]
      (searcher (add1 n) (cdr haystack)))))

;; Returns (head . tail) around the element requested,
;; or false if it isn't found.
(defun split-around (needle haystack [default equal? equal?])
  (let ([n (find needle haystack equal?)])
    (and n (omit-at haystack n))))

(defun last (l)
  (if (null? (cdr l))
    (car l)
    (last (cdr l))))

(defun flatten (l) 
  (and l
    (if (list? (car l))
      (append (car l) (flatten (cdr l)))
      (cons (car l) (flatten (cdr l))))))

(defun riap (x) (cons (cdr x) (car x)))

(defun splice (n surrounder inner)
  (append (take n surrounder) inner (leave n surrounder)))

(defun range ([default start 'never] [default end false])
  (if end
    (let loop ([n start])
      (if (or (equal? end 'never) (< n end))
        (lazy-cons n (loop (add1 n)))
        ()))
    (range 0 start)))

; Unlazy range which i needed
(defun range-direct (start end)
  (let loop ([n (sub1 end)] [acc ()])
    (if (< n start) 
      acc
      (loop (sub1 n) (cons n acc)))))

(defun windows (l n)
  (if (>= (list/len l) n)
    (lazy-cons (take l n) (windows (leave l 1) n))
    ()))

(defun transpose (l)
  (let loop ([l l] [out ()])
    (if (all nil? l)
      out
      (loop (for cdr l) (extend out (for car l))))))

; Convert a list into a map of indices to values
; yes i should have native arrays for this bla bla bla
(defun list/memoize (l) (apply map/new (flatten (enumerate l))))
