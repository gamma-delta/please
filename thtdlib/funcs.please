; Composing and mapping functions

(defun compose (fn . rest)
  (if rest
    (\ (x)
      ; execute fn on ((the rest of the composed functions) of x)
      (fn ((apply compose rest) x)))
    fn))

(defun identity (x) x) ; man that was hard

(defun const (it) (\ _ it))

(defun negate (fn) (\ x (not (apply fn x))))

(defun conjoin fs 
  (\ xs 
    (all (curryr apply xs) fs)))

(defun disjoin fs 
  (\ xs 
    (any (curryr apply xs) fs)))

(defun juxt fs
  (\ xs
    (for (curryr apply xs) fs)))

(defun curry (fn . args)
  (lambda newargs
    (apply fn (append args newargs))))
(define partial curry)

(defun curryr (fn . args)
  (lambda newargs
    (apply fn (append newargs args))))

(defun all (fn list) 
  (if list
    (and (fn (car list)) (all fn (cdr list)))
    true))

(defun any (fn list) 
  (if list
    (or (fn (car list)) (any fn (cdr list)))
    false))

(define-macro thunk bodies `(\ () . ,bodies)) ; require zero args
(define-macro thunk* bodies `(\ _ . ,bodies)) ; allow any args

(define \ lambda)
(define Î» lambda) ; turns out please supports utf8

(defun always? _ true)
(defun never? _ false)

(defun argc (x) 
  (let ([args (first (open-procedure x))])
    ; If the arguments are *not* a proper list it's a vararg function
    (if (list? args)
      (list-len args)
      'inf)))

(defun memoize (fn)
  (define memo (transient/new (map/new)))
  (lambda args
    (if (map/contains? memo args)
      (map/get memo args)
      (let1 [answer (apply fn args)]
        (transient/replace! memo (map/insert! memo args answer))
        answer))))

; aaaAAAaa
; https://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/
; https://mvanier.livejournal.com/2897.html
;
; i'm not going to pretend i know how or why this works
(defun Ymemo (f)
  (let Y ([f f] [cache (transient/new (map/new))])
    (lambda args
      (if (map/contains? cache args)
        (map/get cache args)
        (let1 [answer (apply
            (f (lambda (n) ((Y f cache) n)))
            args)]
          (transient/replace! cache (map/insert! cache args answer))
          answer)))))
(define-macro memoize-loop (label args body . bodies)
  `(Ymemo (lambda (,label)
    (lambda ,args ,body ,@bodies))))
