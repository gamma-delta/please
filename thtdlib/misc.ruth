(define-macro (-> expr . more)
  (if more
    (let (
      [body (car more)]
      [flankers (and (list? body) (split-around '_ body))]
      [threaded (cond
        ; put the threadee between the flankers
        [flankers (append (car flankers) (cons expr (cdr flankers)))] 
        ; put the threadee after the first argument (the function, probably)
        [(list? body) (cons (car body) (cons expr (cdr body)))]
        ; if it's just one bare thing, use it as shorthand for a function call
        ; and insert it as the first argument
        [true (list body expr)])])
      `(-> ,threaded . ,(cdr more)))
    expr))

(define-macro (lambda-> expr . more) `(\ (x) (-> x ,expr . ,more)))

(define-macro (->> expr . more)
  (if more
    (let (
      [body (car more)]
      [flankers (and (list? body) (split-around '_ body))]
      [threaded (cond
        ; put the threadee between the flankers
        [flankers (append (car flankers) (cons expr (cdr flankers)))] 
        ; put the threadee at the end of the arguments
        [(list? body) (extend body expr)]
        ; if it's just one bare thing, use it as shorthand for a function call
        ; and insert it as the first argument
        [true (list body expr)])])
      `(-> ,threaded . ,(cdr more)))
    expr))


(define-macro (lambda->> expr . more) `(\ (x) (->> x ,expr . ,more)))
