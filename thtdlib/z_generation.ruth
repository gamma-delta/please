; Generate functions using macros.
; the `z_` name is because files are evaled in alphabetical order...
; this is garbage garbage code but it works. fite me.

(define (car-family len)
  (let (
    [ads (mult (map (const '(true false)) (range len)))])
    (map 
      (\ (ad) 
        (let 
          ([name 
            (string "c"
            (apply string (map (lambda (c) (if c "a" "d")) ad))
            "r")]
          [code (fold 
            (lambda (a n) (list (if n 'car 'cdr) a))
            'name ad)])
          `(define (,(string->symbol name) name) ,code)))
      ads)))

(define-macro (make-car-family max) 
  (if (>= max 2)
    `(do (unquote-splicing (car-family max)) (make-car-family ,(sub1 max)))
    ()))
(make-car-family 5)
