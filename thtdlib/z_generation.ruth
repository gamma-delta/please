; Generate functions using macros.
; the `z_` name is because files are evaled in alphabetical order...
; this is garbage garbage code but it works. fite me.

(define (car-family len)
  (let (
    [gen-count (** 2 len)]
    ; Generates the (true false ...) list from the code
    [picker-gen (\ (code t f) 
      (for (\ (bitidx) 
        (if (>0 (bitand code (bitshift 1 bitidx)))
          t
          f))
      (range len)))]
    ; all the ad lists
    [ads (for (\ (code) (picker-gen code "a" "d")) (range gen-count))]
    [ca/drs (for (\ (code) (picker-gen code car cdr)) (range gen-count))])
    ; to eval all the defines in the top level, create a "list" over them
    `(identity
      ,(map 
        (\ (ad ca/dr) 
          (prn (string ad " " ca/dr))
          (let ([name (eval `(string "c" ,@ad "r"))])
            `(define ,(string->symbol name) '(lambda-> . ,ca/dr))))
        ads ca/drs))))

(define-macro (make-car-family max) 
  (if (> (eval max) 2)
    ; force eval both this and the next macro
    (list 
      (car-family (eval max)) 
      (make-car-family (sub1 (eval max))))
    ()))
(make-car-family 3)
