(define-macro cond bodies
  (if bodies
    (if (= 1 (list-len bodies))
      (car bodies) ; This way we don't need a [true do-thing] at the end
      (let ([test (car bodies)])
        `(if ,(first test)
          ,(second test)
          (cond . ,(cdr bodies)))))
    '(! 'cond/fail "did not find a true condition" '())))

; Like cond, but where [expr body] means [(equal? x expr) body]
; and [(exprs...) body] means [(equal-any? x . exprs) body]
(define-macro switch (x . bodies)
  (if bodies
    (if (= 1 (list-len bodies))
      (car bodies)
      (let (
        [arm (car bodies)]
        [test (first arm)]
        [predicate (if (list? (eval test))
          `(equal-any? ,x ,@test)
          `(equal? ,x ,test))])
        `(if ,predicate
          ,(second arm)
          (switch ,x . ,(cdr bodies)))))
      `(! 'switch/fail "did not find a true condition" ,x)))

; Like cond, but where [expr body] means [(expr x) body]
; and [(exprs...) body] means [((disjoin . exprs) x) body]
(define-macro which (x . bodies)
  (if bodies
    (if (= 1 (list-len bodies))
      (car bodies)
      (let (
        [arm (car bodies)]
        [test (first arm)]
        [predicate (if (list? test)
          `((disjoin ,@test) ,x)
          `(,test ,x))])
        `(if ,predicate
          ,(second arm)
          (which ,x . ,(cdr bodies)))))
      `(! 'which/fail "did not find a true condition" ,x)))

(define-macro match (x . bodies)
  (if bodies
    (let ([(spec then-branch) (car bodies)])
      `(if-match ,spec ,x 
        ,then-branch
        (match ,x . ,(cdr bodies))))
    `(! 'match/fail "did not find a matching argument spec" ,x)))
(define-macro matches? (spec expr)
  `(if-match ,spec ,expr true false))

(define-macro let1 (pat body . bodies)
  (if (symbol? pat)
    `(let ,pat (,body) ,@bodies)
    `(let (,pat) ,body ,@bodies)))

; Like if-match, but only runs the `then` case if `expr` also evals to something truthy
(define-macro if-let (spec expr then else)
  `(let1 [evaled ,expr]
    (if-match ,spec evaled
      (if evaled ,then ,else)
      ,else)))
