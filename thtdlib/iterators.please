; Iteration and higher-order functions.

; alwinfy, for should not be lazy ...
(defun for (fn list)
  (if list
    (cons (fn (car list)) (for fn (cdr list)))
    ()))

(defun fold (fn acc . lists)
  (if (all (negate null?) lists)
    ; still have leftover list
    (apply fold fn
      (apply fn acc (for car lists))
      (map cdr lists))
    ; we're done, give the acc
    acc))

(defun fold1 (fn . lists)
  (apply fold fn (apply fn (for car lists)) (map cdr lists)))

(defun map (fn . rows)
  (if (all (negate null?) rows)
    (lazy-cons (apply fn (for car rows)) (apply map fn (for cdr rows)))
    ()))

(defun filter (fn list)
  (and list
    (if (fn (car list))
      ; it passes, put the original on and cons on the rest
      (lazy-cons (car list) (filter fn (cdr list)))
      ; ignore and just pass the rest
      (filter fn (cdr list)))))

(defun filter-map (fn . rows)
  (if (all (negate null?) rows)
    (let (
      [res (apply fn (for car rows))]
      [rest (thunk (apply filter-map fn (for cdr rows)))])
      (if res
        (lazy-cons res (rest))
        (rest)))
    ()))

(defun flat-map (f l)
  (apply append (for f l)))

(defun mult1 (l r)
  (flat-map (\ (l) (for (\ (r) (cons r l)) r)) l))

(defun mult (lists)
  (fold mult1 '(()) lists))

(defun repeat (elt [default max false])
  (if max
    (if (>0 max)
      (lazy-cons elt (repeat elt (sub1 max)))
      ())
  (lazy-cons elt (repeat elt))))

; Force-eval the first n elements of the lazy list
(defun reify (n l)
  (if (>=0 n)
    (cons (car l) (reify (sub1 n) (cdr l)))
    l))

(defun find-map (fn . rows)
  (if (all (negate null?) rows)
    (or (apply fn (for car rows)) (apply find-map fn (for cdr rows)))
    false))

(defun zip (l1 l2) (map list l1 l2))
(defun enumerate (l) (zip (range) l))
