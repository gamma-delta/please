(define-macro profiling/get-stats (expr) 
  `(let (
    [_ (profiling/start)]
    [res ,expr]
    [stats (profiling/stop)])
    (cons res stats)))

; Return a list with entries (name avg-time count total-time),
; sorted by the given key.
;
; If filter is a number, entries with a total-time less than the number will be omitted.
; If it's a function, it will be called with each entry, and if it returns false, the entry will be omitted.
; If it's nil, everything passes.
(defun profiling/data/crunch (stats [default filter? always?] [default sort-key ''avg-time])
  (let (
    [keygen (curryr list-nth (switch sort-key
      ['avg-time 1]
      ['count 2]
      ['total-time 3]
      (! 'profiling/data/crunch (curry string "unknown sort key '") sort-key)))]
    [filter?' (which filter?
      [nil? always?]
      [callable? filter?]
      [number? (\ (x) (<= filter? (fourth x)))]
      (! 'profiling/data/crunch (curry string "bad filter type ") (typeof filter?)))]
    [unsorted (for 
      (\ ((name (count time)))
        (list name (/ time count) count time))
      (map->list stats))])
    ; Invert the sort so longest comes first
    (sort/by-key (filter filter?' unsorted) keygen >)))

; Return (total-count total-time)
(defun profiling/data/summarize (stats)
  (fold 
    (\ ((count time) (_ (c t)))
      (list (+ count c) (+ time t)))
    '(0 0)
    (map->list stats)))

; Pretty-print a profiling stats.
(defun profiling/data/pprint (stats [default filter? always?] [default sort-key ''avg-time])
  (let (
    [crunched (profiling/data/crunch stats filter? sort-key)]
    [(total-count total-time) (profiling/data/summarize stats)])
    (string 
      (apply string (map
        (\ (idx (name avg-time count time)) (string 
          "#" (++ idx) ": " 
          count "x " name 
          " (avg. " (number->rounded-string (* 1.0e6 avg-time) 1) "us, "
          "total " (number->rounded-string (* 1000 time) 1) "ms)\n"))
        (range) crunched))
        "---\nTotal time: " (number->rounded-string total-time 1) "s, "
        "evaled " total-count " sexprs")))


; Execute an expression, print some profiling stats to the console, and return the value.
; By default only prints anything taking more than 100ms
(define-macro profiling/do (expr [default filter? 0.01] [default sort-key ''avg-time])
  `(let ([res-stats (profiling/get-stats ,expr)])
    (print (profiling/data/pprint (cdr res-stats) ,filter? ,sort-key))
    (car res-stats)))
