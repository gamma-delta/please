(defun map/keys (map) (for first (map->list map)))
(defun map/vals (map) (for second (map->list map)))

(defun index1 (l x) 
  (which l
    [pair? (list/nth l x)]
    [map? (map/get l x)]
    (! 'index1/bad-type 
      (\ (x) (string "cannot index " (car x) " with " (second x))) 
      (list (typeof l) x))))

(defun counter/new ks 
  (apply counter/add (map/new) ks))
(defun counter/add! (counter . ks) 
  (fold (\ (map k) 
    (let ([v (map/get map k)])
      (map/insert! map k (if v (++ v) 1))))
    counter ks))
(defun counter/add-n! (counter . ks) 
  (fold (\ (map (key count))
    (map/insert! map key (+ count (or (counter/get counter key) 0))))
    counter ks))
(defun counter/add (counter . ks) 
  (transient/persist! (apply counter/add! (transient/new counter) ks)))
(defun counter/get (counter k)
  (or (map/get counter k) 0))
(defun counter/merge! (counter from)
  (fold (\ (counter (k c)) (counter/add-n! counter (list k c)))
    counter (map->list from)))
(defun counter/inflate (counter)
  (flat-map (\ ((k c)) (repeat k c))
    (map->list counter)))
(defun counter/count (counter)
  (fold (\ (acc (_ c)) (+ acc c)) 0 (map->list counter)))