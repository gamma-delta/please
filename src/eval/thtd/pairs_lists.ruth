(define (list . args) args)

(define (list-rev l)
  (fold (lambda (acc elt) (cons elt acc))) () l)

(define (list-len list)
  (fold (lambda (acc elt) (add1 acc))) 0 l)

(define (append l x) 
  (let ([head (car l)] [tail (cdr l)])
    (if tail
      (lazy-cons head (append tail x))
      (lazy-cons head x))))

(define (extend l . rest) (append l rest)) ; auto-list

(define (list-nth l n)
  (if (<=0 n)
    (car l)
    (list-nth (cdr l) (sub1 n))))

(define (first l)   (car l))
(define (second l)  (list-nth l 1))
(define (third l)   (list-nth l 2))
(define (fourth l)  (list-nth l 3))
(define (fifth l)   (list-nth l 4))
(define (sixth l)   (list-nth l 5))
(define (seventh l) (list-nth l 6))
(define (eighth l)  (list-nth l 7))
(define (ninth l)   (list-nth l 8))
(define (tenth l)   (list-nth l 9))

(define (list-empty? l)  (=0 (list-len l)))
(define list-!empty? (~ list-empty?)) ; this is just `null?` w/e

; Return the first `n` elements of `l`
(define (take l n) 
  (if (<=0 n)
    ()
    (lazy-cons (car l) (take (cdr l) (sub1 n)))))

; Skip the first `n` elements of `l`
(define (leave l n)
  (if (<=0 n)
    l
    (leave (cdr l) (sub1 n))))
(define drop leave) ; alwinfy's no fun

; Omit the nth element of l
(define (omit l n) 
  (let ([split (split-at l n)])
    (append (car split) (cdr split))))

(define (split-at l n) (cons (take l n) (leave l (add1 n))))

(define (find needle haystack [equal? equal?]) 
  (let searcher ([n 0] [haystack haystack])
    (cond
      [(not haystack) false]
      [(equal? needle (car haystack)) n]
      [true (searcher (add1 n) (cdr haystack))])))

;; Returns (head, tail) around the element requested,
;; or false if it isn't found.
(define (split-around needle haystack [equal? equal?])
  (let ([n (find needle haystack equal?)])
    (and n (split-at haystack n))))

(define-macro (car-family len)
  (let (
    [len (eval len)] ; altho we're passing a literal w/e
    [gen-count (** 2 len)]
    ; Generates the (true false ...) list from the code
    [picker-gen (\ (code t f) 
      (for (\ (bitidx) 
        (if ((~ =0) (bitand code (bitshift 1 bitidx))) 
          t
          f))
      (range len)))]
    ; all the ad lists
    [ads (for (\ (code) (picker-gen code "a" "d")) (range gen-count))]
    [ca/drs (for (\ (code) (picker-gen code car cdr)) (range gen-count))]
    [name (apply string "c" (extend ads "r"))])
    `(prn name))))

((define-macro (make-car-family max) 
  (if (> max 2)
    (do
      '(car-family max)
      `(make-car-family ,(sub1 max)))
    ())) 7)
