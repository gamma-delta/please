(define (list-rev l)
    (fold () l (lambda (acc elt) (cons elt acc))))

(define (list-len list)
    (fold 0 list (lambda (acc elt) (add1 acc))))

(define (append l x) 
    (let ([head (car l)] [tail (cdr l)])
        (if tail
            (cons head (append tail x))
            (cons head x))))
