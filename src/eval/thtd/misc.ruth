(define-macro (do . bodies) (eval (append '(let ()) bodies)))

(define-macro (-> . bodies) 
  `(fold
    ,(car bodies) ; accumulator is the original val passed
    ,(cdr bodies) ; fold over the rest of the unevaled bodies
    ,(\ (threaded body)
      (prn threaded)
      (prn body)
      (let (
        [slot-flankers (split-around '_ body)]
        [spliced (if slot-flankers
          ; splice our threaded thing in here
          (append (car slot-flankers) (append threaded (cdr slot-flankers)))
          ; there was nothing so stick it on the start
          (cons threaded body))])
        (prn (examine spliced))
        (eval spliced)))))

(define-macro (examine x) (string x))
