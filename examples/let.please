(define-macro (let' assignment body . bodies)
  (if (symbol? assignment)
    ; loop form: assignment -> label, body -> assignment
    `(do
      (define ,assignment (lambda ,(for first body) ,@bodies))
      (,assignment ,@(for second body)))
    `((lambda ,(for first assignment) ,body ,@bodies) ,@(for second assignment))))

(let' (
  [a 1]
  [b 2]
  [c 3])
  (prn (+ a b c)))

(let' loop ([n 10])
  (if (= 0 n)
    (prn "all done")
    (loop (-- (prn n)))))
